{"version":3,"sources":["../../src/core/logger.ts"],"names":["color","getModeColor","ModeLabel","mode","longestMode","modeColor","DEBUG_MODE","ANSI_REGEX","pendingDrains","isBrowser","cachedInspect","cachedInspectPromise","getInspect","module","dimColor","col","factor","r","g","b","nr","ng","nb","x","mergeTextDecoration","current","addition","parts","removeTextDecoration","removal","p","updateStyle","style","code","newStyle","ansiToBrowserFormat","text","fmt","cssArr","lastIndex","currentStyle","pattern","match","segment","objectToCssString","codes","key","value","writeLog","stream","data","inspect","item","resolve","reject","error","consoleDrain","_logger","level","css","DEFAULT_MAX_ENTRIES","LogEntry","Logger","options","customLevels","drain","enabled","parent","prefix","LogLevelValues","levelLabel","colorizedLogLevels","colorMap","promise","count","startIndex","recentLogs","logger"],"mappings":"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","sourcesContent":["import { color } from './color.js'\nimport { getModeColor } from './mode.js'\n\n// Compute mode label color\nlet ModeLabel: string\n\nif (process.env.ROBO_SHARD_MODE) {\n\tconst mode = process.env.ROBO_SHARD_MODE\n\tconst longestMode = process.env.ROBO_SHARD_LONGEST_MODE\n\tconst modeColor = getModeColor(mode)\n\n\tModeLabel = color.bold(color.dim(modeColor(mode.padEnd(longestMode.length))))\n}\n\nexport type LogDrain = (logger: Logger, level: string, ...data: unknown[]) => Promise<void>\n\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'wait' | 'other' | 'event' | 'ready' | 'warn' | 'error'\n\ninterface CustomLevel {\n\tlabel: string\n\tpriority: number\n}\n\nexport interface LoggerOptions {\n\tcustomLevels?: Record<string, CustomLevel>\n\tdrain?: LogDrain\n\tenabled?: boolean\n\tlevel?: LogLevel | string\n\tmaxEntries?: number\n\tparent?: Logger\n\tprefix?: string\n}\n\nexport const DEBUG_MODE = process.env.NODE_ENV !== 'production'\n\n// eslint-disable-next-line no-control-regex\nexport const ANSI_REGEX = /\\x1b\\[.*?m/g\n\nconst pendingDrains = new Set<Promise<void>>()\n\ntype LogStream = typeof process.stderr | typeof process.stdout\n\nfunction isBrowser(): boolean {\n\treturn typeof window !== 'undefined' && typeof document !== 'undefined'\n}\n\n/**\n * Dynamically imports and caches the Node.js `inspect` function.\n * This function is concurrency safe and always returns the same singleton.\n */\nlet cachedInspect: typeof import('node:util').inspect | null = null\nlet cachedInspectPromise: Promise<typeof import('node:util').inspect> | null = null\n\nfunction getInspect(): Promise<typeof import('node:util').inspect> {\n\tif (cachedInspect) {\n\t\treturn Promise.resolve(cachedInspect)\n\t}\n\tif (cachedInspectPromise) {\n\t\treturn cachedInspectPromise\n\t}\n\tcachedInspectPromise = import('node:util').then((module) => {\n\t\tcachedInspect = module.inspect\n\t\treturn cachedInspect\n\t})\n\treturn cachedInspectPromise\n}\n\n/**\n * Given a hex color (e.g. \"#F44336\"), returns a dimmed version by multiplying its\n * RGB components by the given factor (default 0.6). If the input isn't in hex form,\n * the original string is returned.\n */\nfunction dimColor(col: string, factor: number = 0.6): string {\n\tif (col.startsWith('#') && (col.length === 7 || col.length === 4)) {\n\t\tif (col.length === 7) {\n\t\t\tconst r = parseInt(col.slice(1, 3), 16)\n\t\t\tconst g = parseInt(col.slice(3, 5), 16)\n\t\t\tconst b = parseInt(col.slice(5, 7), 16)\n\t\t\tconst nr = Math.round(r * factor)\n\t\t\tconst ng = Math.round(g * factor)\n\t\t\tconst nb = Math.round(b * factor)\n\n\t\t\treturn '#' + [nr, ng, nb].map((x) => x.toString(16).padStart(2, '0')).join('')\n\t\t} else if (col.length === 4) {\n\t\t\t// Expand short hex notation (#rgb)\n\t\t\tconst r = parseInt(col.charAt(1) + col.charAt(1), 16)\n\t\t\tconst g = parseInt(col.charAt(2) + col.charAt(2), 16)\n\t\t\tconst b = parseInt(col.charAt(3) + col.charAt(3), 16)\n\t\t\tconst nr = Math.round(r * factor)\n\t\t\tconst ng = Math.round(g * factor)\n\t\t\tconst nb = Math.round(b * factor)\n\n\t\t\treturn '#' + [nr, ng, nb].map((x) => x.toString(16).padStart(2, '0')).join('')\n\t\t}\n\t}\n\n\treturn col\n}\n\n/**\n * Merges a new text-decoration value into an existing one.\n * (If the existing decoration is empty or \"none\", returns the new one.)\n */\nfunction mergeTextDecoration(current: string | undefined, addition: string): string {\n\tif (!current || current === 'none') {\n\t\treturn addition\n\t}\n\tconst parts = current.split(/\\s+/)\n\tif (parts.includes(addition)) return current\n\treturn parts.concat(addition).join(' ')\n}\n\n/**\n * Removes a specific text-decoration from the current decoration.\n */\nfunction removeTextDecoration(current: string | undefined, removal: string): string {\n\tif (!current) return ''\n\tconst parts = current.split(/\\s+/).filter((p) => p !== removal)\n\treturn parts.join(' ')\n}\n\n/**\n * Updates the given style object based on a single ANSI code.\n * This switch–case implementation supports merging of effects such as bold and underline.\n */\nfunction updateStyle(style: Record<string, string>, code: string): Record<string, string> {\n\t// Clone the current style.\n\tconst newStyle = { ...style }\n\n\tswitch (code) {\n\t\tcase '0':\n\t\t\t// Reset all styles.\n\t\t\treturn {}\n\t\tcase '1':\n\t\t\tnewStyle['font-weight'] = 'bold'\n\t\t\tbreak\n\t\tcase '2':\n\t\t\t// If a color is already set, adjust it; otherwise, use a default dim gray.\n\t\t\tif (newStyle['color']) {\n\t\t\t\tnewStyle['color'] = dimColor(newStyle['color'], 0.6)\n\t\t\t} else {\n\t\t\t\tnewStyle['color'] = '#999999'\n\t\t\t}\n\t\t\tbreak\n\t\tcase '3':\n\t\t\tnewStyle['font-style'] = 'italic'\n\t\t\tbreak\n\t\tcase '4':\n\t\t\tnewStyle['text-decoration'] = mergeTextDecoration(newStyle['text-decoration'], 'underline')\n\t\t\tbreak\n\t\tcase '7':\n\t\t\tnewStyle['filter'] = 'invert(100%)'\n\t\t\tbreak\n\t\tcase '8':\n\t\t\tnewStyle['visibility'] = 'hidden'\n\t\t\tbreak\n\t\tcase '9':\n\t\t\tnewStyle['text-decoration'] = mergeTextDecoration(newStyle['text-decoration'], 'line-through')\n\t\t\tbreak\n\t\tcase '22':\n\t\t\t// Reset bold/dim.\n\t\t\tdelete newStyle['font-weight']\n\t\t\t// Remove any dimmed color by leaving the color untouched (or you could reset to original if needed)\n\t\t\tbreak\n\t\tcase '23':\n\t\t\tdelete newStyle['font-style']\n\t\t\tbreak\n\t\tcase '24':\n\t\t\tnewStyle['text-decoration'] = removeTextDecoration(newStyle['text-decoration'], 'underline')\n\t\t\tbreak\n\t\tcase '27':\n\t\t\tdelete newStyle['filter']\n\t\t\tbreak\n\t\tcase '28':\n\t\t\tnewStyle['visibility'] = 'visible'\n\t\t\tbreak\n\t\tcase '29':\n\t\t\tnewStyle['text-decoration'] = removeTextDecoration(newStyle['text-decoration'], 'line-through')\n\t\t\tbreak\n\t\t// Foreground colors\n\t\tcase '30':\n\t\t\tnewStyle['color'] = 'black'\n\t\t\tbreak\n\t\tcase '31':\n\t\t\tnewStyle['color'] = '#F44336'\n\t\t\tbreak\n\t\tcase '32':\n\t\t\tnewStyle['color'] = '#4CAF50'\n\t\t\tbreak\n\t\tcase '33':\n\t\t\tnewStyle['color'] = '#FFEB3B'\n\t\t\tbreak\n\t\tcase '34':\n\t\t\tnewStyle['color'] = '#2196F3'\n\t\t\tbreak\n\t\tcase '35':\n\t\t\tnewStyle['color'] = '#FF4081'\n\t\t\tbreak\n\t\tcase '36':\n\t\t\tnewStyle['color'] = '#00E5FF'\n\t\t\tbreak\n\t\tcase '37':\n\t\t\tnewStyle['color'] = 'white'\n\t\t\tbreak\n\t\tcase '39':\n\t\t\tnewStyle['color'] = 'inherit'\n\t\t\tbreak\n\t\tcase '90':\n\t\t\tnewStyle['color'] = '#9E9E9E'\n\t\t\tbreak\n\t\tcase '91':\n\t\t\tnewStyle['color'] = '#FF5252'\n\t\t\tbreak\n\t\tcase '92':\n\t\t\tnewStyle['color'] = '#69F0AE'\n\t\t\tbreak\n\t\tcase '93':\n\t\t\tnewStyle['color'] = '#FFD700'\n\t\t\tbreak\n\t\tcase '94':\n\t\t\tnewStyle['color'] = '#448AFF'\n\t\t\tbreak\n\t\tcase '95':\n\t\t\tnewStyle['color'] = '#EA80FC'\n\t\t\tbreak\n\t\tcase '96':\n\t\t\tnewStyle['color'] = '#18FFFF'\n\t\t\tbreak\n\t\tcase '97':\n\t\t\tnewStyle['color'] = '#FFFFFF'\n\t\t\tbreak\n\t\t// Background colors\n\t\tcase '40':\n\t\t\tnewStyle['background-color'] = 'black'\n\t\t\tbreak\n\t\tcase '41':\n\t\t\tnewStyle['background-color'] = '#F44336'\n\t\t\tbreak\n\t\tcase '42':\n\t\t\tnewStyle['background-color'] = '#4CAF50'\n\t\t\tbreak\n\t\tcase '43':\n\t\t\tnewStyle['background-color'] = '#FFEB3B'\n\t\t\tbreak\n\t\tcase '44':\n\t\t\tnewStyle['background-color'] = '#2196F3'\n\t\t\tbreak\n\t\tcase '45':\n\t\t\tnewStyle['background-color'] = '#E91E63'\n\t\t\tbreak\n\t\tcase '46':\n\t\t\tnewStyle['background-color'] = '#00E5FF'\n\t\t\tbreak\n\t\tcase '47':\n\t\t\tnewStyle['background-color'] = 'white'\n\t\t\tbreak\n\t\tcase '49':\n\t\t\tnewStyle['background-color'] = 'inherit'\n\t\t\tbreak\n\t\tcase '100':\n\t\t\tnewStyle['background-color'] = '#9E9E9E'\n\t\t\tbreak\n\t\tcase '101':\n\t\t\tnewStyle['background-color'] = '#FF5252'\n\t\t\tbreak\n\t\tcase '102':\n\t\t\tnewStyle['background-color'] = '#69F0AE'\n\t\t\tbreak\n\t\tcase '103':\n\t\t\tnewStyle['background-color'] = '#FFD700'\n\t\t\tbreak\n\t\tcase '104':\n\t\t\tnewStyle['background-color'] = '#448AFF'\n\t\t\tbreak\n\t\tcase '105':\n\t\t\tnewStyle['background-color'] = '#EA80FC'\n\t\t\tbreak\n\t\tcase '106':\n\t\t\tnewStyle['background-color'] = '#18FFFF'\n\t\t\tbreak\n\t\tcase '107':\n\t\t\tnewStyle['background-color'] = '#FFFFFF'\n\t\t\tbreak\n\t\tdefault:\n\t\t\t// For unrecognized codes, do nothing.\n\t\t\tbreak\n\t}\n\n\treturn newStyle\n}\n\n/**\n * Converts an ANSI-coded string into a format string and a corresponding CSS array\n * for use with browser console methods. This parser is stateful and will merge consecutive\n * ANSI codes into a single CSS style.\n */\nfunction ansiToBrowserFormat(text: string): { fmt: string; css: string[] } {\n\tlet fmt = ''\n\tconst cssArr: string[] = []\n\tlet lastIndex = 0\n\tlet currentStyle: Record<string, string> = {}\n\n\t// Match one or more codes at a time (e.g. \"\\x1b[1;36m\")\n\t// eslint-disable-next-line no-control-regex\n\tconst pattern = /\\x1b\\[([0-9;]+)m/g\n\tlet match: RegExpExecArray | null\n\n\twhile ((match = pattern.exec(text)) !== null) {\n\t\t// Append any plain text preceding the ANSI sequence.\n\t\tif (match.index > lastIndex) {\n\t\t\tconst segment = text.slice(lastIndex, match.index).replace(/%/g, '%%')\n\t\t\tfmt += '%c' + segment\n\t\t\tcssArr.push(objectToCssString(currentStyle))\n\t\t}\n\n\t\t// Process the ANSI sequence.\n\t\tconst codes = match[1].split(';')\n\t\tfor (const code of codes) {\n\t\t\tcurrentStyle = updateStyle(currentStyle, code)\n\t\t}\n\n\t\tlastIndex = pattern.lastIndex\n\t}\n\n\t// Append any trailing text.\n\tif (lastIndex < text.length) {\n\t\tconst segment = text.slice(lastIndex).replace(/%/g, '%%')\n\t\tfmt += '%c' + segment\n\t\tcssArr.push(objectToCssString(currentStyle))\n\t}\n\n\t// If no ANSI codes were found, return the text as-is.\n\tif (cssArr.length === 0) {\n\t\treturn { fmt: text, css: [] }\n\t}\n\n\treturn { fmt, css: cssArr }\n}\n\n/**\n * Converts a style object into a CSS string.\n */\nfunction objectToCssString(style: Record<string, string>): string {\n\treturn Object.entries(style)\n\t\t.map(([key, value]) => `${key}: ${value}`)\n\t\t.join('; ')\n}\n\n/**\n * Writes log data. Do not call this in browser environments.\n * This uses the dynamically imported `inspect` function and writes to the provided stream.\n */\nasync function writeLog(stream: LogStream, ...data: unknown[]): Promise<void> {\n\tconst inspect = await getInspect()\n\tconst parts = data.map((item) => {\n\t\tif (typeof item === 'object' || item instanceof Error || Array.isArray(item)) {\n\t\t\treturn inspect(item, { colors: true, depth: null })\n\t\t}\n\n\t\treturn item\n\t})\n\n\treturn new Promise<void>((resolve, reject) => {\n\t\tstream.write(parts.join(' ') + '\\n', 'utf8', (error) => {\n\t\t\tif (error) {\n\t\t\t\treject(error)\n\t\t\t} else {\n\t\t\t\tresolve()\n\t\t\t}\n\t\t})\n\t})\n}\n\n/**\n * A drain function that writes logs either to stdout/stderr (in Node.js)\n * or uses console.log/error (in browsers). In browsers, it uses ansiToBrowserFormat()\n * to convert ANSI codes into %c format with merged CSS.\n */\nexport function consoleDrain(_logger: Logger, level: string, ...data: unknown[]): Promise<void> {\n\tif (isBrowser()) {\n\t\tconst text = data.join(' ')\n\t\tconst { fmt, css } = ansiToBrowserFormat(text)\n\n\t\tif (level === 'warn' || level === 'error') {\n\t\t\tconsole.error(fmt, ...css)\n\t\t} else {\n\t\t\tconsole.log(fmt, ...css)\n\t\t}\n\n\t\treturn Promise.resolve()\n\t}\n\n\tswitch (level) {\n\t\tcase 'trace':\n\t\tcase 'debug':\n\t\tcase 'info':\n\t\tcase 'wait':\n\t\tcase 'event':\n\t\t\treturn writeLog(process.stdout, ...data)\n\t\tcase 'warn':\n\t\tcase 'error':\n\t\t\treturn writeLog(process.stderr, ...data)\n\t\tdefault:\n\t\t\treturn writeLog(process.stdout, ...data)\n\t}\n}\n\nconst DEFAULT_MAX_ENTRIES = 100\n\nclass LogEntry {\n\tlevel: string\n\ttimestamp: Date\n\tdata: unknown[]\n\n\tconstructor(level: string, data: unknown[]) {\n\t\tthis.level = level\n\t\tthis.data = data\n\t\tthis.timestamp = new Date()\n\t}\n\n\tmessage(): string {\n\t\tconst messageParts = this.data.map((item) => {\n\t\t\tif (item instanceof Error) {\n\t\t\t\treturn item.message\n\t\t\t} else if (typeof item === 'object') {\n\t\t\t\ttry {\n\t\t\t\t\treturn JSON.stringify(item)\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// In case of circular structures or other stringify errors, return a fallback string\n\t\t\t\t\treturn '[unserializable object]'\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn item\n\t\t})\n\n\t\treturn messageParts.join(' ').replace(ANSI_REGEX, '')\n\t}\n}\n\n/**\n * The logger class provides a simple and flexible logging system.\n *\n * ```ts\n * import { logger } from 'robo.js'\n *\n * // Can be used instead of console.log\n * logger.info('Hello, world!')\n * logger.debug('This is a debug message')\n * logger.warn('Warning: something is not right')\n * logger.error('An error occurred')\n *\n * // To make your own Logger instance\n * import { Logger } from 'robo.js'\n *\n * const customLogger = new Logger({\n * \tlevel: 'debug'\n * })\n * ```\n *\n * Use logger whenever possible instead of `console.log` to take advantage of Robo drains and log levels.\n *\n * [**Learn more:** Logger](https://robojs.dev/robojs/logger)\n */\nexport class Logger {\n\tprotected _customLevels: Record<string, CustomLevel>\n\tprotected _enabled: boolean\n\tprotected _level: LogLevel | string\n\tprotected _levelValues: Record<string, number>\n\tprotected _parent: Logger | undefined\n\tprotected _prefix: string | undefined\n\tprivate _currentIndex: number\n\tprivate _drain: LogDrain\n\tprivate _logBuffer: LogEntry[]\n\n\tconstructor(options?: LoggerOptions) {\n\t\tthis.setup(options)\n\t}\n\n\tpublic setup(options?: LoggerOptions) {\n\t\tconst { customLevels, drain = consoleDrain, enabled = true, level, parent, prefix } = options ?? {}\n\n\t\tthis._customLevels = customLevels\n\t\tthis._drain = drain\n\t\tthis._enabled = enabled\n\t\tthis._parent = parent\n\t\tthis._prefix = prefix\n\n\t\tif (process.env.ROBOPLAY_ENV) {\n\t\t\t// This allows developers to have better control over the logs when hosted\n\t\t\tthis._level = 'trace'\n\t\t} else {\n\t\t\tthis._level = level ?? 'info'\n\t\t}\n\n\t\t// Combine the default log levels with the custom ones\n\t\tthis._levelValues = {\n\t\t\t...LogLevelValues,\n\t\t\t...Object.fromEntries(Object.entries(this._customLevels ?? {}).map(([key, value]) => [key, value.priority]))\n\t\t}\n\n\t\t// Initialize the log buffer\n\t\tthis._currentIndex = 0\n\t\tthis._logBuffer = new Array(options?.maxEntries ?? DEFAULT_MAX_ENTRIES)\n\t}\n\n\tprotected _log(prefix: string | null, level: string, ...data: unknown[]): void {\n\t\t// Delegate to parent if forked\n\t\tif (this._parent) {\n\t\t\treturn this._parent._log(this._prefix, level, ...data)\n\t\t}\n\n\t\t// Only log if the level is enabled\n\t\tif (!this._enabled) {\n\t\t\treturn\n\t\t}\n\n\t\t// If using the default drain, perform the level check\n\t\tif (this._drain === consoleDrain && this._levelValues[this._level] > this._levelValues[level]) {\n\t\t\treturn\n\t\t}\n\n\t\t// Format the message all pretty and stuff\n\t\tif (level !== 'other') {\n\t\t\tconst label = this._customLevels ? this._customLevels[level]?.label : colorizedLogLevels[level]\n\t\t\tlet levelLabel = (label ?? level.padEnd(5)) + ' -'\n\n\t\t\t// Add the prefix if specified\n\t\t\tif (prefix) {\n\t\t\t\tlevelLabel = color.bold(colorMap[level](prefix + ':')) + levelLabel\n\t\t\t}\n\n\t\t\tdata.unshift(levelLabel)\n\t\t}\n\n\t\t// Add the mode label if one exists\n\t\tif (ModeLabel !== undefined && data.length > 1) {\n\t\t\tdata.unshift(ModeLabel)\n\t\t}\n\n\t\t// Persist the log entry in debug mode\n\t\tif (DEBUG_MODE) {\n\t\t\tthis._logBuffer[this._currentIndex] = new LogEntry(level, data)\n\t\t\tthis._currentIndex = (this._currentIndex + 1) % this._logBuffer.length\n\t\t}\n\n\t\t// Drain the log entry\n\t\tconst promise = this._drain(this, level, ...data)\n\t\tpendingDrains.add(promise)\n\t\tpromise.finally(() => {\n\t\t\tpendingDrains.delete(promise)\n\t\t})\n\t}\n\n\t/**\n\t * Waits for all pending log writes to complete.\n\t */\n\tpublic async flush(): Promise<void> {\n\t\t// Delegate to parent if forked\n\t\tif (this._parent) {\n\t\t\treturn this._parent.flush()\n\t\t}\n\n\t\tawait Promise.allSettled([...pendingDrains])\n\t}\n\n\t/**\n\t * Creates a new logger instance with the specified prefix.\n\t * This is useful for creating a logger for a specific plugin, big features, or modules.\n\t *\n\t * All writes and cached logs will be delegated to the parent logger, so debugging will still work.\n\t *\n\t * @param prefix The prefix to add to the logger (e.g. 'my-plugin')\n\t * @returns A new logger instance with the specified prefix\n\t */\n\tpublic fork(prefix: string): Logger {\n\t\treturn new Logger({\n\t\t\tcustomLevels: this._customLevels,\n\t\t\tenabled: this._enabled,\n\t\t\tlevel: this._level,\n\t\t\tparent: this,\n\t\t\tprefix: this._prefix ? this._prefix + prefix : prefix\n\t\t})\n\t}\n\n\tpublic getLevel(): LogLevel | string {\n\t\t// Delegate to parent if forked\n\t\tif (this._parent) {\n\t\t\treturn this._parent.getLevel()\n\t\t}\n\n\t\treturn this._level\n\t}\n\n\tpublic getLevelValues(): Record<string, number> {\n\t\t// Delegate to parent if forked\n\t\tif (this._parent) {\n\t\t\treturn this._parent.getLevelValues()\n\t\t}\n\n\t\treturn this._levelValues\n\t}\n\n\tpublic getRecentLogs(count = 50): LogEntry[] {\n\t\t// Delegate to parent if forked\n\t\tif (this._parent) {\n\t\t\treturn this._parent.getRecentLogs(count)\n\t\t}\n\n\t\t// Return an empty array if the log buffer is empty\n\t\tif (count <= 0) {\n\t\t\treturn []\n\t\t}\n\n\t\t// Ensure the count doesn't exceed the number of logs in the buffer\n\t\tcount = Math.min(count, this._logBuffer.length)\n\t\tconst startIndex = (this._currentIndex - count + this._logBuffer.length) % this._logBuffer.length\n\t\tlet recentLogs: LogEntry[]\n\n\t\tif (startIndex < this._currentIndex) {\n\t\t\trecentLogs = this._logBuffer.slice(startIndex, this._currentIndex)\n\t\t} else {\n\t\t\trecentLogs = this._logBuffer.slice(startIndex).concat(this._logBuffer.slice(0, this._currentIndex))\n\t\t}\n\n\t\treturn recentLogs.reverse()\n\t}\n\n\tpublic setDrain(drain: LogDrain) {\n\t\tthis._drain = drain\n\t}\n\n\tpublic trace(...data: unknown[]) {\n\t\tthis._log(null, 'trace', ...data)\n\t}\n\n\tpublic debug(...data: unknown[]) {\n\t\tthis._log(null, 'debug', ...data)\n\t}\n\n\tpublic info(...data: unknown[]) {\n\t\tthis._log(null, 'info', ...data)\n\t}\n\n\tpublic wait(...data: unknown[]) {\n\t\tthis._log(null, 'wait', ...data)\n\t}\n\n\tpublic log(...data: unknown[]) {\n\t\tthis._log(null, 'other', ...data)\n\t}\n\n\tpublic event(...data: unknown[]) {\n\t\tthis._log(null, 'event', ...data)\n\t}\n\n\tpublic ready(...data: unknown[]) {\n\t\tthis._log(null, 'ready', ...data)\n\t}\n\n\tpublic warn(...data: unknown[]) {\n\t\tthis._log(null, 'warn', ...data)\n\t}\n\n\tpublic error(...data: unknown[]) {\n\t\tthis._log(null, 'error', ...data)\n\t}\n\n\tpublic custom(level: string, ...data: unknown[]): void {\n\t\tif (this._customLevels?.[level]) {\n\t\t\tthis._log(null, level, ...data)\n\t\t}\n\t}\n}\n\nconst LogLevelValues: Record<string, number> = {\n\ttrace: 0,\n\tdebug: 1,\n\tinfo: 2,\n\twait: 3,\n\tother: 4,\n\tevent: 5,\n\tready: 6,\n\twarn: 7,\n\terror: 8\n}\n\nconst colorMap: Record<string, (str: string) => string> = {\n\ttrace: color.gray,\n\tdebug: color.cyan,\n\tinfo: color.blue,\n\twait: color.cyan,\n\tevent: color.magenta,\n\tready: color.green,\n\twarn: color.yellow,\n\terror: color.red\n}\n\nconst colorizedLogLevels: Record<string, string> = {\n\ttrace: color.gray('trace'.padEnd(5)),\n\tdebug: color.cyan('debug'.padEnd(5)),\n\tinfo: color.blue('info'.padEnd(5)),\n\twait: color.cyan('wait'.padEnd(5)),\n\tevent: color.magenta('event'.padEnd(5)),\n\tready: color.green('ready'.padEnd(5)),\n\twarn: color.yellow('warn'.padEnd(5)),\n\terror: color.red('error'.padEnd(5))\n}\n\nlet _logger: Logger | null = null\n\nexport function logger(options?: LoggerOptions): Logger {\n\tif (!_logger && options) {\n\t\t_logger = new Logger(options)\n\t} else if (!_logger) {\n\t\t_logger = new Logger()\n\t} else if (options) {\n\t\t_logger.setup(options)\n\t}\n\n\treturn _logger\n}\n\nlogger.flush = async function (): Promise<void> {\n\tawait logger().flush()\n}\n\nlogger.fork = function (prefix: string): Logger {\n\treturn logger().fork(prefix)\n}\n\nlogger.getRecentLogs = function (count = 25): LogEntry[] {\n\treturn logger().getRecentLogs(count)\n}\n\nlogger.trace = function (...data: unknown[]): void {\n\treturn logger().trace(...data)\n}\n\nlogger.debug = function (...data: unknown[]): void {\n\treturn logger().debug(...data)\n}\n\nlogger.info = function (...data: unknown[]): void {\n\treturn logger().info(...data)\n}\n\nlogger.wait = function (...data: unknown[]): void {\n\treturn logger().wait(...data)\n}\n\nlogger.log = function (...data: unknown[]): void {\n\treturn logger().log(...data)\n}\n\nlogger.event = function (...data: unknown[]): void {\n\treturn logger().event(...data)\n}\n\nlogger.ready = function (...data: unknown[]): void {\n\treturn logger().ready(...data)\n}\n\nlogger.warn = function (...data: unknown[]): void {\n\treturn logger().warn(...data)\n}\n\nlogger.error = function (...data: unknown[]): void {\n\treturn logger().error(...data)\n}\n\nlogger.custom = function (level: string, ...data: unknown[]): void {\n\treturn logger().custom(level, ...data)\n}\n"]}