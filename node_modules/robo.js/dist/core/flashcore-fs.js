import i from 'node:fs/promises';
import o from 'node:path';
import { pipeline } from 'node:stream/promises';
import d from 'node:zlib';
import { createReadStream, createWriteStream } from 'node:fs';
import { logger } from './logger.js';
import { hasProperties } from '../cli/utils/utils.js';
import { createHash } from 'node:crypto';

class N{dataDir;constructor(e={}){this.dataDir=e.dataDir??o.join(process.cwd(),".robo","data");}async clear(){try{return await i.rm(this.dataDir,{recursive:!0,force:!0}),await i.mkdir(this.dataDir,{recursive:!0}),!0}catch{return !1}}async delete(e){try{const r=o.join(this.dataDir,n(e));return await i.unlink(r),!0}catch(r){return hasProperties(r,["code"])&&r.code!=="ENOENT"&&logger.warn(`Failed to delete key "${e}" from Flashcore file adapter.`,r),!1}}async get(e){try{const r=o.join(this.dataDir,n(e)),a=d.createGunzip();await pipeline(createReadStream(r),a);const t=a.read();return t?JSON.parse(t.toString()):void 0}catch{return}}async has(e){return !!await this.get(e)}async init(){try{await i.mkdir(this.dataDir,{recursive:!0});}catch(e){logger.error("Failed to create data directory for Flashcore file adapter.",e);}}async set(e,r){try{const a=o.join(this.dataDir,n(e)),t=d.createGzip();return t.write(JSON.stringify(r)),t.end(),await pipeline(t,createWriteStream(a)),!0}catch{return !1}}}function n(s){return createHash("sha256").update(s.toString()).digest("hex")}

export { N as FlashcoreFileAdapter };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=flashcore-fs.js.map