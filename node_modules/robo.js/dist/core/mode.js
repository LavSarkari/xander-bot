import { color } from './color.js';
import { logger } from './logger.js';

let e=null,g;const M=Object.freeze({color:O,get:h,is:E});function d(o){const t=[color.cyan,color.yellow,color.red,color.blue,color.green,color.magenta],c=o.split("").reduce((i,s)=>i+s.charCodeAt(0),0);return t[c%t.length]}function N(o){o&&(e=o),!e&&process.env.NODE_ENV&&(e=process.env.NODE_ENV);const t=e?.split(",")?.flatMap(i=>i.split(" "))?.filter(Boolean)??[];logger.debug("Setting mode(s) to",t);let c=null;if(t.length>1){const i=t.reduce((s,l)=>s.length>l.length?s:l);c=async()=>{const{fork:s}=await import('node:child_process');t.forEach(l=>{const a=process.argv.slice(2),p=[];let f=!1;a.forEach(r=>{if(f&&r.startsWith("-"))f=!1;else if(f)return;p.push(r),(r==="--mode"||r==="-m")&&(p.push(r,l),f=!0);}),s(process.argv[1],p,{env:{...process.env,ROBO_SHARD_MODE:l,ROBO_SHARD_MODES:t.join(","),ROBO_SHARD_LONGEST_MODE:i}}).on("exit",r=>{logger.debug(`Child process exited with code ${r}`);});});};}else g=d(e);return {shardModes:c}}function O(o){return g||(g=d(e)),g(o)}function h(){return !e&&process.env.NODE_ENV&&(e=process.env.NODE_ENV),e}function E(o){return h()===o}

export { M as Mode, O as colorMode, d as getModeColor, N as setMode };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=mode.js.map