import { logger } from '../core/logger.js';
import { hasProperties } from '../cli/utils/utils.js';
import { stat, readFile, rm, mkdir, writeFile } from 'node:fs/promises';
import path from 'node:path';

const Nanocore = { get, remove, set, update };
async function get(key) {
  const nanoFile = path.join(process.cwd(), ".robo", key + ".json");
  try {
    const exists = await stat(nanoFile);
    if (exists.isFile()) {
      const data = await readFile(nanoFile, "utf-8");
      return JSON.parse(data);
    }
  } catch (e) {
    if (hasProperties(e, ["code"]) && e.code !== "ENOENT") {
      logger.debug(`Failed to get Nanocore key "${key}".`);
    }
  }
  return void 0;
}
async function remove(key) {
  const nanoFile = path.join(process.cwd(), ".robo", key + ".json");
  try {
    const exists = await stat(nanoFile);
    if (exists.isFile()) {
      await rm(nanoFile);
    }
  } catch (e) {
    if (hasProperties(e, ["code"]) && e.code !== "ENOENT") {
      logger.debug(`Failed to remove Nanocore key "${key}". Please delete it manually at ${nanoFile}`);
    }
  }
}
async function set(key, data) {
  const nanoFile = path.join(process.cwd(), ".robo", key + ".json");
  try {
    await mkdir(path.dirname(nanoFile), { recursive: true });
    await writeFile(nanoFile, JSON.stringify(data, null, "	"));
  } catch (e) {
    logger.debug(`Failed to set Nanocore key "${key}".`);
  }
}
async function update(key, data) {
  try {
    const existing = await get(key) ?? {};
    await set(key, { ...existing, ...data });
  } catch (e) {
    logger.debug(`Failed to update Nanocore key "${key}".`);
  }
}

export { Nanocore };
