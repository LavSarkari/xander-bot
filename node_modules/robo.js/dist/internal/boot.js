import { env } from '../core/env.js';
import { logger } from '../core/logger.js';
import { Nanocore } from './nanocore.js';

const Boot = { check, get, getRandom, notification };
const DefaultCheckFrequency = 24 * 60 * 60 * 1e3;
const DefaultDev = [
  {
    content: "Beep boop... Code your Robo to life! Got feedback? Tell us on Discord!",
    type: "dev"
  },
  {
    content: "Loading modules... Keep refining that magic! Spot any sparks?",
    type: "dev"
  },
  {
    content: "Compiling wonders... Your Robo is shaping up. Talk to us if stuck!",
    type: "dev"
  }
];
const DefaultStart = [
  {
    content: "Boop beep... Powering on Robo! Need hosting? Check out RoboPlay.dev!",
    type: "start"
  },
  {
    content: "System go... Show the world your Robo! Need hosting? We\u2019re here!",
    type: "start"
  }
];
async function get(type) {
  let messages = type === "dev" ? DefaultDev : DefaultStart;
  try {
    const data = await Nanocore.get("boot/messages/" + type);
    if (data && Array.isArray(data) && data.length > 0) {
      messages = data;
    }
  } catch (e) {
    logger.debug("Failed to get boot messages.", e);
  }
  return messages;
}
async function getRandom(type) {
  const messages = await get(type);
  const totalWeight = messages.reduce((acc, m) => acc + (m.weight ?? 1), 0);
  const random = Math.random() * totalWeight;
  let weight = 0;
  for (const message of messages) {
    weight += message.weight ?? 1;
    if (random < weight) {
      return message;
    }
  }
  return messages[0];
}
async function check() {
  try {
    if (env.get("boot.disableCheck") === "true") {
      logger.debug("Boot message check is disabled. Skipping...");
      return;
    }
    const check2 = await Nanocore.get("boot/check") ?? {
      frequency: DefaultCheckFrequency,
      lastCheck: 0
    };
    if (Date.now() - check2.lastCheck < check2.frequency) {
      return;
    }
    const response = await fetch(env.get("roboplay.api") + "/robojs/messages");
    if (!response.ok) {
      throw new Error(`${response.status} ${response.statusText}`);
    }
    const data = await response.json();
    const devMessages = data.messages.filter((m) => m.type === "dev");
    const startMessages = data.messages.filter((m) => m.type === "start");
    if (data.checkFrequency) {
      await Nanocore.update("boot/check", { frequency: data.checkFrequency });
    }
    if (devMessages.length > 0) {
      await Nanocore.set("boot/messages/dev", devMessages);
    }
    if (startMessages.length > 0) {
      await Nanocore.set("boot/messages/start", startMessages);
    }
  } catch (e) {
    await Nanocore.update("boot/check", { frequency: DefaultCheckFrequency });
  } finally {
    await Nanocore.update("boot/check", { lastCheck: Date.now() });
  }
}
async function notification(notification2) {
  const notifications = await Nanocore.get("notifications") ?? [];
  const existing = notifications.find((n) => n.message === notification2.message);
  if (!existing) {
    notifications.push(notification2);
    await Nanocore.set("notifications", notifications);
  }
}

export { Boot };
