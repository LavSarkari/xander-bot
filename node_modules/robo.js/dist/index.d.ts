export { color, composeColors } from './core/color.js';
export { getConfig } from './core/config.js';
export { Env } from './core/env.js';
import { M as Manifest } from './index-e9e52e45.js';
export { A as Api, p as ApiEntry, B as BaseConfig, q as Command, r as CommandConfig, s as CommandContext, t as CommandEntry, u as CommandIntegrationType, v as CommandOption, x as CommandOptionTypes, y as CommandOptions, w as CommandResult, z as Config, b as Context, C as ContextConfig, a as ContextEntry, E as Event, G as EventConfig, F as FlashcoreAdapter, H as HandlerRecord, l as HttpMethod, e as Middleware, c as MiddlewareData, f as MiddlewareEntry, d as MiddlewareResult, P as PackageJson, i as Plugin, j as PluginData, k as PluginMetaOptions, R as RoboMessage, n as RoboReply, m as RoboRequest, g as RoboStateMessage, o as RouteHandler, h as SageOptions, D as Scope, S as SpiritMessage } from './index-e9e52e45.js';
export { Flashcore } from './core/flashcore.js';
export { createCommandConfig } from './core/handlers.js';
export { LogDrain, Logger, logger } from './core/logger.js';
export { Mode } from './core/mode.js';
export { getPluginOptions } from './core/portal.js';
export { Robo, client, portal } from './core/robo.js';
export { State, getState, setState } from './core/state.js';
import 'discord.js';
import 'node:http';

interface GetManifestOptions {
    name?: string;
}
/**
 * Retrieve a manifest that has already been loaded via `useManifest`.
 * If the manifest has not been loaded, `null` is returned.
 */
declare function getManifest(options?: GetManifestOptions): Manifest | null;

export { Manifest, getManifest };
